/*
 * File: Breakout.java
 * -------------------
 * Name:wang li
 * Section Leader:jianbin Ray
 * help by:http://cs106a.tumblr.com
 * This file will eventually implement the game of Breakout.
 */

import acm.graphics.*;
import acm.program.*;
import acm.util.*;

import java.applet.*;
import java.awt.*;
import java.awt.event.*;

public class Breakout extends GraphicsProgram {

	/** Width and height of application window in pixels */
	public static final int APPLICATION_WIDTH = 400;
	public static final int APPLICATION_HEIGHT = 600;

	/** Dimensions of game board (usually the same) */
	private static final int WIDTH = APPLICATION_WIDTH;
	private static final int HEIGHT = APPLICATION_HEIGHT;

	/** Dimensions of the paddle */
	private static final int PADDLE_WIDTH = 60;
	private static final int PADDLE_HEIGHT = 10;

	/** Offset of the paddle up from the bottom */
	private static final int PADDLE_Y_OFFSET = 30;

	/** Number of bricks per row */
	private static final int NBRICKS_PER_ROW = 10;

	/** Number of rows of bricks */
	private static final int NBRICK_ROWS = 10;

	/** Separation between bricks */
	private static final int BRICK_SEP = 4;

	/** Width of a brick */
	private static final int BRICK_WIDTH = (WIDTH - (NBRICKS_PER_ROW - 1)
			* BRICK_SEP)
			/ NBRICKS_PER_ROW;

	/** Height of a brick */
	private static final int BRICK_HEIGHT = 8;

	/** Radius of the ball in pixels */
	private static final int BALL_RADIUS = 10;

	/** Offset of the top brick row from the top */
	private static final int BRICK_Y_OFFSET = 70;

	/** Number of turns */
	private static final int NTURNS = 3;

	/* Method: run() */
	/** Runs the Breakout program. */
	/*
	 * This program will execute setuup first, which will get ready for bricks
	 * paddles and place the ball as well. with the function of mouse listener
	 * can made the paddle follow mouse. with all the background of the game
	 * done, then the game will be start in playTheGame
	 */
	public void run() {
		setUp();
		addMouseListeners();
		playTheGame();
	}

	/*
	 * Setup contains set up the bricks, paddle and the ball, which is the basic
	 * background of the game.
	 */
	private void setUp() {
		setUpBricks();
		drawPaddle();
		placeBall();
	}

	/* colorful bricks */
	private void setUpBricks() {
		double startCoorx = 0;
		double startCoory = BRICK_Y_OFFSET;
		int j;
		for (j = 0; j < NBRICK_ROWS; j++) {
			for (int i = 0; i < NBRICKS_PER_ROW; i++) {
				double x = startCoorx + (BRICK_SEP + BRICK_WIDTH) * i;
				double y = startCoory;
				GRect rect = new GRect(x, y, BRICK_WIDTH, BRICK_HEIGHT);
				if (j == 0 || j == 1) {
					rect.setFillColor(Color.red);
				}
				if (j == 2 || j == 3) {
					rect.setFillColor(Color.orange);
				}
				if (j == 4 || j == 5) {
					rect.setFillColor(Color.yellow);
				}
				if (j == 6 || j == 7) {
					rect.setFillColor(Color.green);
				}
				if (j == 8 || j == 9) {
					rect.setFillColor(Color.cyan);
				}
				rect.setFilled(true);

				add(rect);
			}
			startCoory += BRICK_SEP + BRICK_HEIGHT;
		}
	}

	/* draw paddle near the bottom of the canvas */
	private void drawPaddle() {
		double x1 = (getWidth() - PADDLE_WIDTH) / 2;
		double y1 = getHeight() - PADDLE_Y_OFFSET - PADDLE_HEIGHT;
		paddle = new GRect(x1, y1, PADDLE_WIDTH, PADDLE_HEIGHT);
		add(paddle);
		paddle.setFilled(true);
		paddle.setColor(Color.black);
	}

	/* add in mouse listeners to make the mouse track with the paddle */
	public void mouseMoved(MouseEvent e) {
		paddle.setLocation(e.getX() - BRICK_WIDTH / 2, getHeight()
				- BRICK_HEIGHT - BRICK_Y_OFFSET);
		if (paddle.getX() <= 0) {
			paddle.setLocation(0, paddle.getY());
		}
		if (paddle.getX() >= getWidth() - BRICK_WIDTH) {
			paddle.setLocation(getWidth() - BRICK_WIDTH, paddle.getY());
		}
	}

	/* place the ball, it init position is in the middle of the canvas */
	private void placeBall() {
		double ballX = getWidth() / 2 - BALL_RADIUS;
		double ballY = getHeight() / 2 - BALL_RADIUS;
		ball = new GOval(BALL_RADIUS * 2, BALL_RADIUS * 2);
		ball.setFilled(true);
		add(ball, ballX, ballY);
	}

	/* Initialize the vx variable */
	private void getBallVelocity() {
		vx = rgen.nextDouble(1.0, 3.0);
		if (rgen.nextBoolean(0.5)) {
			vx = -vx;
		}
		vy = 10.0;
	}

	/*
	 * made the ball move, set the ball's position when it flies out of the
	 * canvas.
	 */
	private void moveBall() {
		ball.move(vx, vy);
		if (ball.getX() <= 0 && ball.getX() >= getWidth() - BALL_RADIUS * 2) {
			vx = -vx;
		}
		if (ball.getY() <= 0) {
			vy = -vy;
		}
	}

	/*
	 * check if the ball is collide with the wall of the paddle, if the ball
	 * collide with wall, then it's position will be reversed in x and y
	 * direction. if the ball collide with paddle, it will reverse its direction
	 * immediately
	 */
	private void checkCollision() {
		GObject collider = getCollidingObject();
		if (collider == paddle) {
			vy = -vy;
		}
		if (collider != null) {
			vy = -vy;
			remove(collider);
			counter++;
		}
	}

	/*
	 * use getElementAt(x, y) method to check if the ball hit something in both
	 * direction (x, y),(x, y + 2 * r), (x + 2 * r, y + 2 * r), (x + 2 * r, y)
	 * if there is paddle in one of the four direction, then it will return the
	 * ball's position to the method.while if there's nothing, it will return
	 * null to getElementAt(x, y).
	 */
	private GObject getCollidingObject() {
		if (getElementAt(ball.getX(), ball.getY()) != null)
			return getElementAt(ball.getX(), ball.getY());

		else if (getElementAt(ball.getX() + 2 * BALL_RADIUS, ball.getY()) != null)
			return getElementAt(ball.getX() + 2 * BALL_RADIUS, ball.getY());
		else if (getElementAt(ball.getX(), ball.getY() + 2 * BALL_RADIUS) != null)
			return getElementAt(ball.getX(), ball.getY() + 2 * BALL_RADIUS);
		else if (getElementAt(ball.getX() + 2 * BALL_RADIUS, ball.getY() + 2
				* BALL_RADIUS) != null)
			return getElementAt(ball.getX() + 2 * BALL_RADIUS, ball.getY() + 2
					* BALL_RADIUS);
		else
			return null;
	}

	/*
	 * play the game, when click the game are begin, if the paddle can't hold
	 * the falling ball for three times, the loop will get an end. there is a
	 * counter which will count the bricks which were removed after collide with
	 * the paddle.
	 */
	private void playTheGame() {
		while (turn < NTURNS) {
			waitForClick();
			getBallVelocity();
			placeBall();
			while (counter < NBRICK_ROWS * NBRICKS_PER_ROW) {
				moveBall();
				checkCollision();
				pause(40);
				if (ball.getY() == getHeight() - BALL_RADIUS * 2) {
					remove(ball);
					turn++;
					break;
				}
			}
		}
		printResult();
	}

	/* print the result */
	private void printResult() {
		result = new GLabel(" oh, you win !");
		double x = getWidth() / 2 - result.getWidth() / 2;
		double y = getHeight() / 2;
		if (counter == NBRICK_ROWS * NBRICKS_PER_ROW) {
			add(result, x, y);
		} else if (turn == NTURNS) {
			result = new GLabel("pity! you lose !");
			add(result, x, y);
		}
	}

	private GRect paddle;
	private GOval ball;
	private RandomGenerator rgen = RandomGenerator.getInstance();
	private double vx;
	private double vy;
	private int counter = 0;
	private GLabel result;
	private int turn = 0;
}


	
	
	

		
	
